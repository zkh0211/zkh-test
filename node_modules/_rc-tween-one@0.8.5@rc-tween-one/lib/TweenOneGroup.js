'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _TweenOne = require('./TweenOne');

var _TweenOne2 = _interopRequireDefault(_TweenOne);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

function noop() {}

var TweenOneGroup = function (_Component) {
  _inherits(TweenOneGroup, _Component);

  function TweenOneGroup() {
    _classCallCheck(this, TweenOneGroup);

    var _this = _possibleConstructorReturn(this, _Component.apply(this, arguments));

    _this.keysToEnter = [];
    _this.keysToLeave = [];
    _this.onEnterBool = false;
    _this.isTween = {};
    // 第一进入，appear 为 true 时默认用 enter 或 tween-one 上的效果
    var children = (0, _util.toArrayChildren)((0, _util.getChildrenFromProps)(_this.props));
    children.forEach(function (child) {
      if (!child || !child.key) {
        return;
      }
      _this.keysToEnter.push(child.key);
    });
    _this.state = {
      children: children
    };
    ['getChildrenToRender', 'getCoverAnimation', 'onChange'].forEach(function (method) {
      return _this[method] = _this[method].bind(_this);
    });
    return _this;
  }

  TweenOneGroup.prototype.componentDidMount = function componentDidMount() {
    this.onEnterBool = true;
  };

  TweenOneGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    var nextChildren = (0, _util.toArrayChildren)(nextProps.children);
    var currentChildren = this.state.children;
    var newChildren = (0, _util.mergeChildren)(currentChildren, nextChildren);

    this.keysToEnter = [];
    this.keysToLeave = [];
    nextChildren.forEach(function (c) {
      if (!c) {
        return;
      }
      var key = c.key;
      var hasPrev = (0, _util.findChildInChildrenByKey)(currentChildren, key);
      if (!hasPrev && key) {
        _this2.keysToEnter.push(key);
      }
    });

    currentChildren.forEach(function (c) {
      if (!c) {
        return;
      }
      var key = c.key;
      var hasNext = (0, _util.findChildInChildrenByKey)(nextChildren, key);
      if (!hasNext && key) {
        _this2.keysToLeave.push(key);
      }
    });
    this.setState({
      children: newChildren
    });
  };

  TweenOneGroup.prototype.onChange = function onChange(animation, key, type, obj) {
    var length = (0, _util.dataToArray)(animation).length;
    var animatingClassName = this.props.animatingClassName;
    var tag = obj.target;
    if (obj.mode === 'onStart') {
      tag.className = tag.className.replace(animatingClassName[type === 'enter' ? 1 : 0], '').trim();
      if (tag.className.indexOf(animatingClassName[type === 'enter' ? 0 : 1]) === -1) {
        tag.className = (tag.className + ' ' + animatingClassName[type === 'enter' ? 0 : 1]).trim();
      }
    } else if (obj.index === length - 1 && obj.mode === 'onComplete') {
      var children = void 0;
      if (type === 'enter') {
        children = this.state.children;
        this.keysToEnter.splice(this.keysToEnter.indexOf(key), 1);
      } else {
        children = this.state.children.filter(function (child) {
          return key !== child.key;
        });
        this.keysToLeave.splice(this.keysToLeave.indexOf(key), 1);
      }
      tag.className = tag.className.replace(animatingClassName[type === 'enter' ? 0 : 1], '').trim();
      delete this.isTween[key];
      this.setState({
        children: children
      });
      var _obj = { key: key, type: type };
      this.props.onEnd(_obj);
    }
  };

  TweenOneGroup.prototype.getCoverAnimation = function getCoverAnimation(child, i, type) {
    var animation = void 0;
    var onChange = void 0;
    var appear = (0, _util.transformArguments)(this.props.appear, child.key, i);
    if (appear || this.onEnterBool) {
      animation = type === 'leave' ? this.props.leave : this.props.enter;
      onChange = this.onChange.bind(this, animation, child.key, type);
    }
    var children = _react2["default"].createElement(_TweenOne2["default"], _extends({}, child.props, {
      key: child.key,
      component: child.type,
      animation: (0, _util.transformArguments)(animation, child.key, i),
      onChange: onChange,
      resetStyleBool: child.key in this.isTween
    }));
    if (this.keysToEnter.concat(this.keysToLeave).indexOf(child.key) >= 0) {
      this.isTween[child.key] = true;
    }
    return children;
  };

  TweenOneGroup.prototype.getChildrenToRender = function getChildrenToRender(children) {
    var _this3 = this;

    return children.map(function (child, i) {
      if (!child || !child.key) {
        return child;
      }
      var key = child.key;
      if (_this3.keysToLeave.indexOf(key) >= 0) {
        return _this3.getCoverAnimation(child, i, 'leave');
      }
      return _this3.getCoverAnimation(child, i, 'enter');
    });
  };

  TweenOneGroup.prototype.render = function render() {
    var childrenToRender = this.getChildrenToRender(this.state.children);
    if (!this.props.component) {
      return childrenToRender[0] || null;
    }
    var componentProps = _extends({}, this.props);
    ['component', 'appear', 'enter', 'leave', 'animatingClassName', 'onEnd'].forEach(function (key) {
      return delete componentProps[key];
    });
    return (0, _react.createElement)(this.props.component, componentProps, childrenToRender);
  };

  return TweenOneGroup;
}(_react.Component);

var objectOrArray = _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.array]);
var objectOrArrayOrFunc = _react.PropTypes.oneOfType([objectOrArray, _react.PropTypes.func]);

TweenOneGroup.propTypes = {
  component: _react.PropTypes.any,
  children: _react.PropTypes.any,
  style: _react.PropTypes.object,
  appear: _react.PropTypes.bool,
  enter: objectOrArrayOrFunc,
  leave: objectOrArrayOrFunc,
  animatingClassName: _react.PropTypes.array,
  onEnd: _react.PropTypes.func
};

TweenOneGroup.defaultProps = {
  component: 'div',
  appear: true,
  animatingClassName: ['tween-one-entering', 'tween-one-leaving'],
  enter: { x: 50, opacity: 0, type: 'from' },
  leave: { x: -50, opacity: 0 },
  onEnd: noop
};
exports["default"] = TweenOneGroup;
module.exports = exports['default'];
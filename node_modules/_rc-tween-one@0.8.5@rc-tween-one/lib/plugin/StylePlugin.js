'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _styleUtils = require('style-utils');

var _styleUtils2 = _interopRequireDefault(_styleUtils);

var _objectAssign = require('object-assign');

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _plugins = require('../plugins');

var _plugins2 = _interopRequireDefault(_plugins);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var StylePlugin = function StylePlugin(target, vars, type) {
  this.target = target;
  this.vars = vars;
  this.type = type;
  this.propsData = {};
  this.setDefaultData();
}; /* eslint-disable func-names, no-console */

var p = StylePlugin.prototype = {
  name: 'style'
};
p.getComputedStyle = function () {
  return document.defaultView ? document.defaultView.getComputedStyle(this.target) : {};
};
p.getTweenData = function (key, vars) {
  var data = {
    data: {},
    dataType: {},
    dataUnit: {},
    dataCount: {},
    dataSplitStr: {}
  };
  if (key.match(/color/i) || key === 'fill' || key === 'stroke') {
    data.data[key] = (0, _styleUtils.parseColor)(vars);
    data.dataType[key] = 'color';
  } else if (key.match(/shadow/i)) {
    data.data[key] = (0, _styleUtils.parseShadow)(vars);
    data.dataType[key] = 'shadow';
  } else if (typeof vars === 'string' && vars.split(/[\s|,]/).length > 1) {
    data.data[key] = vars.split(/[\s|,]/);
    data.dataSplitStr[key] = vars.replace(/[^\s|,]/g, '');
    data.dataType[key] = 'string';
  } else {
    data.data[key] = vars;
    data.dataType[key] = 'other';
  }
  if (Array.isArray(data.data[key])) {
    data.dataUnit[key] = data.data[key].map(function (_item) {
      return _item.toString().replace(/[^a-z|%]/g, '');
    });
    data.dataCount[key] = data.data[key].map(function (_item) {
      return _item.toString().replace(/[^+|=|-]/g, '');
    });

    data.data[key] = data.data[key].map(function (_item) {
      return !parseFloat(_item) && parseFloat(_item) !== 0 ? _item : parseFloat(_item);
    });
  } else {
    data.dataUnit[key] = data.data[key].toString().replace(/[^a-z|%]/g, '');
    data.dataCount[key] = data.data[key].toString().replace(/[^+|=|-]/g, '');
    var d = parseFloat(data.data[key].toString().replace(/[a-z|%|=]/g, ''));
    data.data[key] = !d && d !== 0 ? data.data[key] : d;
  }
  return data;
};
p.setDefaultData = function () {
  var _this = this;

  this.propsData.data = {};
  this.propsData.dataType = {};
  this.propsData.dataUnit = {};
  this.propsData.dataCount = {};
  this.propsData.dataSplitStr = {};
  Object.keys(this.vars).forEach(function (_key) {
    if (_key in _plugins2["default"]) {
      _this.propsData.data[_key] = new _plugins2["default"][_key](_this.target, _this.vars[_key]);
      return;
    }
    var key = (0, _styleUtils.getGsapType)(_key);
    var _data = _this.getTweenData(key, _this.vars[_key]);
    _this.propsData.data[key] = _data.data[key];
    _this.propsData.dataType[key] = _data.dataType[key];
    _this.propsData.dataUnit[key] = _data.dataUnit[key];
    _this.propsData.dataCount[key] = _data.dataCount[key];
    if (_data.dataSplitStr[key]) {
      _this.propsData.dataSplitStr[key] = _data.dataSplitStr[key];
    }
  });
};
p.convertToMarks = function (style, num, unit, isOrigin, fixed) {
  var horiz = /(?:Left|Right|Width|X)/i.test(style);
  var t = style.indexOf('border') !== -1 || style === 'transformOrigin' ? this.target : this.target.parentNode || document.body;
  t = fixed ? document.body : t;
  var pix = void 0;
  if (unit === '%') {
    pix = parseFloat(num) * 100 / (horiz || isOrigin ? t.clientWidth : t.clientHeight);
  } else if (unit && unit.match(/em/i)) {
    // em rem
    pix = parseFloat(num) / 16;
  } else {
    pix = parseFloat(num);
  }
  return pix;
};
p.convertToMarksArray = function (unit, key, data, i) {
  var startUnit = data.toString().replace(/[^a-z|%]/g, '');
  var endUnit = unit[i];
  if (startUnit === endUnit) {
    return parseFloat(data);
  } else if (!parseFloat(data) && parseFloat(data) !== 0) {
    return data;
  }
  return this.convertToMarks(key, data, endUnit, key === 'transformOrigin' && !i);
};
p.getAnimStart = function () {
  var _this2 = this;

  var computedStyle = this.getComputedStyle();
  var style = {};
  this.supports3D = (0, _styleUtils.checkStyleName)('perspective');
  Object.keys(this.propsData.data).forEach(function (key) {
    var cssName = (0, _styleUtils.isConvert)(key);
    var startData = computedStyle[cssName];
    var fixed = computedStyle.position === 'fixed';
    if (!startData || startData === 'none' || startData === 'auto') {
      startData = '';
    }
    var transform = void 0;
    var endUnit = void 0;
    var startUnit = void 0;
    if (key in _plugins2["default"]) {
      if (key === 'bezier') {
        _this2.transform = (0, _styleUtils.checkStyleName)('transform');
        startData = computedStyle[_this2.transform];
        style.transform = (0, _styleUtils.getTransform)(startData);
      }
      _this2.propsData.data[key].getAnimStart();
    } else if (cssName === 'transform') {
      _this2.transform = (0, _styleUtils.checkStyleName)('transform');
      startData = computedStyle[_this2.transform];
      endUnit = _this2.propsData.dataUnit[key];
      transform = (0, _styleUtils.getTransform)(startData);
      if (endUnit === '%') {
        var percent = key === 'translateX' ? 'xPercent' : 'yPercent';
        transform[percent] = _this2.convertToMarks(key, transform[key], '%');
        transform[key] = 0;
      }
      style.transform = transform;
    } else if (cssName === 'filter') {
      _this2.filterName = (0, _styleUtils.checkStyleName)('filter');
      startData = computedStyle[_this2.filterName];
      _this2.filterObject = (0, _objectAssign2["default"])(_this2.filterObject || {}, (0, _styleUtils.splitFilterToObject)(startData));
      startData = _this2.filterObject[key] || 0;
      startUnit = startData.toString().replace(/[^a-z|%]/g, '');
      endUnit = _this2.propsData.dataUnit[key];
      if (endUnit !== startUnit) {
        startData = _this2.convertToMarks(key, startData, endUnit, null, fixed);
      }
      style[key] = parseFloat(startData);
    } else if (key.match(/color/i) || key === 'fill' || key === 'stroke') {
      startData = !startData && key === 'stroke' ? 'rgba(255, 255, 255, 0)' : startData;
      style[cssName] = (0, _styleUtils.parseColor)(startData);
    } else if (key.match(/shadow/i)) {
      startData = (0, _styleUtils.parseShadow)(startData);
      endUnit = _this2.propsData.dataUnit[key];
      startData = startData.map(_this2.convertToMarksArray.bind(_this2, endUnit, key));
      style[cssName] = startData;
    } else if (Array.isArray(_this2.propsData.data[key])) {
      startData = startData.split(/[\s|,]/);
      endUnit = _this2.propsData.dataUnit[key];
      startData = startData.map(_this2.convertToMarksArray.bind(_this2, endUnit, key));
      style[cssName] = startData;
    } else {
      // 计算单位
      endUnit = _this2.propsData.dataUnit[cssName];
      startUnit = startData.toString().replace(/[^a-z|%]/g, '');
      if (endUnit !== startUnit) {
        if (startUnit === '%') {
          var node = document.createElement('div');
          node.style.cssText = 'border:0 solid red;position: ' + computedStyle.position + 'line-height:0;';
          var horiz = /(?:Left|Right|Width)/i.test(cssName);
          node.style[horiz ? 'width' : 'height'] = startData;
          node.style[cssName] = 0;
          var parentNode = _this2.target.parentNode || document.body;
          parentNode.appendChild(node);
          startData = parseFloat(node[horiz ? 'offsetWidth' : 'offsetHeight']);
          parentNode.removeChild(node);
        } else if (endUnit && endUnit !== 'px') {
          startData = _this2.convertToMarks(cssName, startData, endUnit, null, fixed);
        }
      }
      style[cssName] = parseFloat(startData || 0);
    }
  });
  this.start = style;
  return style;
};
p.setAnimData = function (data, ratio) {
  var _this3 = this;

  var style = this.target.style;
  Object.keys(data).forEach(function (_key) {
    if (_key === 'transform') {
      var t = data[_key];
      var start = _this3.start.transform || {};
      var perspective = typeof t.perspective === 'number' ? t.perspective : start.perspective;
      var angle = typeof t.rotate === 'number' ? t.rotate : start.rotate;
      var rotateX = typeof t.rotateX === 'number' ? t.rotateX : start.rotateX;
      var rotateY = typeof t.rotateY === 'number' ? t.rotateY : start.rotateY;
      var sx = typeof t.scaleX === 'number' ? t.scaleX : start.scaleX;
      var sy = typeof t.scaleY === 'number' ? t.scaleY : start.scaleY;
      var sz = typeof t.scaleZ === 'number' ? t.scaleZ : start.scaleZ;
      var skx = typeof t.skewX === 'number' ? t.skewX : start.skewX;
      var sky = typeof t.skewY === 'number' ? t.skewY : start.skewY;
      var translateX = typeof t.translateX === 'number' ? t.translateX : start.translateX;
      var translateY = typeof t.translateY === 'number' ? t.translateY : start.translateY;
      var translateZ = (typeof t.translateZ === 'number' ? t.translateZ : start.tranlateZ) || 0;
      var xPercent = t.xPercent || 0;
      var yPercent = t.yPercent || 0;
      var percent = '' + (xPercent || yPercent ? 'translate(' + xPercent + ',' + yPercent + ')' : '');
      var sk = skx || sky ? 'skew(' + skx + 'deg,' + sky + 'deg)' : '';
      var an = angle ? 'rotate(' + angle + 'deg)' : '';
      var ss = void 0;
      if (!perspective && !rotateX && !rotateY && !translateZ && sz === 1) {
        if (!_this3.supports3D || ratio >= 1) {
          var matrix = '1,0,0,1,' + translateX + ',' + translateY;
          ss = sx !== 1 || sy !== 1 ? 'scale(' + sx + ',' + sy + ')' : '';
          // IE 9 没 3d;
          style[_this3.transform] = (percent + ' matrix(' + matrix + ') ' + an + ' ' + ss + ' ' + sk).trim();
          return;
        }
        ss = sx !== 1 || sy !== 1 ? 'scale(' + sx + ',' + sy + ')' : '';
        style[_this3.transform] = (percent + ' translate3d(' + translateX + 'px,' + translateY + 'px,' + translateZ + 'px) ' + an + ' ' + ss + ' ' + sk).trim();
        return;
      }
      ss = sx !== 1 || sy !== 1 || sz !== 1 ? 'scale3d(' + sx + ',' + sy + ',' + sz + ')' : '';
      var rX = rotateX ? 'rotateX(' + rotateX + 'deg)' : '';
      var rY = rotateY ? 'rotateY(' + rotateY + 'deg)' : '';
      var per = perspective ? 'perspective(' + perspective + 'px)' : '';
      style[_this3.transform] = (per + ' ' + percent + ' translate3d(' + translateX + 'px,' + translateY + 'px,' + translateZ + 'px) ' + ss + ' ' + an + ' ' + rX + ' ' + rY + ' ' + sk).trim();
      return;
    } else if (_styleUtils2["default"].filter.indexOf(_key) >= 0) {
      if (!_this3.filterObject) {
        return;
      }
      _this3.filterObject[_key] = data[_key];
      var filterStyle = '';
      Object.keys(_this3.filterObject).forEach(function (filterKey) {
        filterStyle += ' ' + filterKey + '(' + _this3.filterObject[filterKey] + ')';
      });
      style[_this3.filterName] = filterStyle.trim();
      return;
    }
    style[_key] = data[_key];
  });
};
p.setArrayRatio = function (ratio, start, vars, unit, type) {
  if (type === 'color' && start.length === 4 && vars.length === 3) {
    vars[3] = 1;
  }
  var startInset = start.indexOf('inset') >= 0;
  // 操，indexOf 改了我三次，发了三个版本，我是有多粗心啊。。。
  var endInset = vars.indexOf('inset') >= 0;
  if (startInset && !endInset || endInset && !startInset) {
    throw console.error('Error: "box-shadow" inset have to exist');
  }
  var length = endInset ? 9 : 8;
  if (start.length === length && vars.length === length - 1) {
    vars.splice(3, 0, 0);
    unit.splice(3, 0, '');
  } else if (vars.length === length && start.length === length - 1) {
    start.splice(3, 0, 0);
  }
  var _vars = vars.map(function (endData, i) {
    var startIsAlpha = type === 'color' && i === 3 && !start[i] ? 1 : 0;
    var startData = typeof start[i] === 'number' ? start[i] : startIsAlpha;
    if (typeof endData === 'string') {
      return endData;
    }
    return (endData - startData) * ratio + startData + (unit[i] || 0);
  });
  if (type === 'color') {
    return (0, _styleUtils.getColor)(_vars);
  } else if (type === 'shadow') {
    var l = _vars.length === length ? 4 : 3;
    var s = _vars.slice(0, l).map(function (item) {
      if (typeof item === 'number') {
        return item + 'px';
      }
      return item;
    });
    var c = _vars.slice(l, endInset ? _vars.length - 1 : _vars.length);
    var color = (0, _styleUtils.getColor)(c);
    return (s.join(' ') + ' ' + color + ' ' + (endInset ? 'inset' : '')).trim();
  }
  return _vars;
};

p.setRatio = function (ratio, tween) {
  var _this4 = this;

  tween.style = tween.style || {};
  if (this.start.transform) {
    tween.style.transform = tween.style.transform || {};
  }
  Object.keys(this.propsData.data).forEach(function (key) {
    var _isTransform = (0, _styleUtils.isTransform)(key) === 'transform';
    var startVars = _isTransform ? _this4.start.transform[key] : _this4.start[key];
    var endVars = _this4.propsData.data[key];
    var unit = _this4.propsData.dataUnit[key];
    var count = _this4.propsData.dataCount[key];
    if (key in _plugins2["default"]) {
      _this4.propsData.data[key].setRatio(ratio, tween);
      return;
    } else if (_isTransform) {
      if (unit === '%' || unit === 'em' || unit === 'rem') {
        var pName = key === 'translateX' ? 'xPercent' : 'yPercent';
        startVars = _this4.start.transform[pName];
        if (count.charAt(1) === '=') {
          tween.style.transform[pName] = startVars + endVars * ratio + unit;
          return;
        }
        tween.style.transform[pName] = (endVars - startVars) * ratio + startVars + unit;
        return;
      } else if (key === 'scale') {
        var xStart = _this4.start.transform.scaleX;
        var yStart = _this4.start.transform.scaleY;
        if (count.charAt(1) === '=') {
          tween.style.transform.scaleX = xStart + endVars * ratio;
          tween.style.transform.scaleY = yStart + endVars * ratio;
          return;
        }
        tween.style.transform.scaleX = (endVars - xStart) * ratio + xStart;
        tween.style.transform.scaleY = (endVars - yStart) * ratio + yStart;
        return;
      }
      if (count.charAt(1) === '=') {
        tween.style.transform[key] = startVars + endVars * ratio;
        return;
      }
      tween.style.transform[key] = (endVars - startVars) * ratio + startVars;
      return;
    } else if (Array.isArray(endVars)) {
      var _type = _this4.propsData.dataType[key];
      tween.style[key] = _this4.setArrayRatio(ratio, startVars, endVars, unit, _type);
      if (_type === 'string') {
        tween.style[key] = tween.style[key].join(_this4.propsData.dataSplitStr[key]);
      }
      return;
    }
    var styleUnit = (0, _styleUtils.stylesToCss)(key, 0);
    styleUnit = typeof styleUnit === 'number' ? '' : styleUnit.replace(/[^a-z|%]/g, '');
    unit = unit || (_styleUtils2["default"].filter.indexOf(key) >= 0 ? '' : styleUnit);
    if (typeof endVars === 'string') {
      tween.style[key] = endVars;
    } else {
      if (count.charAt(1) === '=') {
        tween.style[key] = startVars + endVars * ratio + unit;
        return;
      }
      tween.style[key] = (endVars - startVars) * ratio + startVars + unit;
    }
  });
  this.setAnimData(tween.style, ratio);
};
exports["default"] = StylePlugin;
module.exports = exports['default'];
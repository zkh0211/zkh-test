'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getWindow = require('get-window');

var _getWindow2 = _interopRequireDefault(_getWindow);

var _findClosestNode = require('./find-closest-node');

var _findClosestNode2 = _interopRequireDefault(_findClosestNode);

var _findPoint = require('./find-point');

var _findPoint2 = _interopRequireDefault(_findPoint);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Find the target point for a drop `event`.
 *
 * @param {Event} event
 * @param {State} state
 * @return {Object}
 */

function findDropPoint(event, state) {
  var document = state.document;
  var nativeEvent = event.nativeEvent,
      target = event.target;
  var x = nativeEvent.x,
      y = nativeEvent.y;

  // Resolve the caret position where the drop occured.

  var window = (0, _getWindow2.default)(target);
  var n = void 0,
      o = void 0;

  // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)
  if (window.document.caretRangeFromPoint) {
    var range = window.document.caretRangeFromPoint(x, y);
    n = range.startContainer;
    o = range.startOffset;
  } else {
    var position = window.document.caretPositionFromPoint(x, y);
    n = position.offsetNode;
    o = position.offset;
  }

  var nodeEl = (0, _findClosestNode2.default)(n, '[data-key]');
  var nodeKey = nodeEl.getAttribute('data-key');
  var node = document.key === nodeKey ? document : document.getDescendant(nodeKey);

  // If the drop DOM target is inside an inline void node use last position of
  // the previous sibling text node or first position of the next sibling text
  // node as Slate target.
  if (node.isVoid && node.kind === 'inline') {
    var rect = nodeEl.getBoundingClientRect();
    var previous = x - rect.left < rect.left + rect.width - x;
    var text = previous ? document.getPreviousSibling(nodeKey) : document.getNextSibling(nodeKey);
    var key = text.key;
    var offset = previous ? text.characters.size : 0;
    return { key: key, offset: offset };
  }

  // If the drop DOM target is inside a block void node use last position of
  // the previous sibling block node or first position of the next sibling block
  // node as Slate target.
  if (node.isVoid) {
    var _rect = nodeEl.getBoundingClientRect();
    var _previous = y - _rect.top < _rect.top + _rect.height - y;

    if (_previous) {
      var _block = document.getPreviousBlock(nodeKey);
      var _text2 = _block.getLastText();
      var _key2 = _text2.key;

      var _offset2 = _text2.characters.size;
      return { key: _key2, offset: _offset2 };
    }

    var block = document.getNextBlock(nodeKey);
    var _text = block.getLastText();
    var _key = _text.key;

    var _offset = 0;
    return { key: _key, offset: _offset };
  }

  var point = (0, _findPoint2.default)(n, o, state);
  return point;
}

/**
 * Export.
 *
 * @type {Function}
 */

exports.default = findDropPoint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9nZXQtZHJvcC1wb2ludC5qcyJdLCJuYW1lcyI6WyJmaW5kRHJvcFBvaW50IiwiZXZlbnQiLCJzdGF0ZSIsImRvY3VtZW50IiwibmF0aXZlRXZlbnQiLCJ0YXJnZXQiLCJ4IiwieSIsIndpbmRvdyIsIm4iLCJvIiwiY2FyZXRSYW5nZUZyb21Qb2ludCIsInJhbmdlIiwic3RhcnRDb250YWluZXIiLCJzdGFydE9mZnNldCIsInBvc2l0aW9uIiwiY2FyZXRQb3NpdGlvbkZyb21Qb2ludCIsIm9mZnNldE5vZGUiLCJvZmZzZXQiLCJub2RlRWwiLCJub2RlS2V5IiwiZ2V0QXR0cmlidXRlIiwibm9kZSIsImtleSIsImdldERlc2NlbmRhbnQiLCJpc1ZvaWQiLCJraW5kIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInByZXZpb3VzIiwibGVmdCIsIndpZHRoIiwidGV4dCIsImdldFByZXZpb3VzU2libGluZyIsImdldE5leHRTaWJsaW5nIiwiY2hhcmFjdGVycyIsInNpemUiLCJ0b3AiLCJoZWlnaHQiLCJibG9jayIsImdldFByZXZpb3VzQmxvY2siLCJnZXRMYXN0VGV4dCIsImdldE5leHRCbG9jayIsInBvaW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7OztBQUVBOzs7Ozs7OztBQVFBLFNBQVNBLGFBQVQsQ0FBdUJDLEtBQXZCLEVBQThCQyxLQUE5QixFQUFxQztBQUFBLE1BQzNCQyxRQUQyQixHQUNkRCxLQURjLENBQzNCQyxRQUQyQjtBQUFBLE1BRTNCQyxXQUYyQixHQUVISCxLQUZHLENBRTNCRyxXQUYyQjtBQUFBLE1BRWRDLE1BRmMsR0FFSEosS0FGRyxDQUVkSSxNQUZjO0FBQUEsTUFHM0JDLENBSDJCLEdBR2xCRixXQUhrQixDQUczQkUsQ0FIMkI7QUFBQSxNQUd4QkMsQ0FId0IsR0FHbEJILFdBSGtCLENBR3hCRyxDQUh3Qjs7QUFLbkM7O0FBQ0EsTUFBTUMsU0FBUyx5QkFBVUgsTUFBVixDQUFmO0FBQ0EsTUFBSUksVUFBSjtBQUFBLE1BQU9DLFVBQVA7O0FBRUE7QUFDQSxNQUFJRixPQUFPTCxRQUFQLENBQWdCUSxtQkFBcEIsRUFBeUM7QUFDdkMsUUFBTUMsUUFBUUosT0FBT0wsUUFBUCxDQUFnQlEsbUJBQWhCLENBQW9DTCxDQUFwQyxFQUF1Q0MsQ0FBdkMsQ0FBZDtBQUNBRSxRQUFJRyxNQUFNQyxjQUFWO0FBQ0FILFFBQUlFLE1BQU1FLFdBQVY7QUFDRCxHQUpELE1BSU87QUFDTCxRQUFNQyxXQUFXUCxPQUFPTCxRQUFQLENBQWdCYSxzQkFBaEIsQ0FBdUNWLENBQXZDLEVBQTBDQyxDQUExQyxDQUFqQjtBQUNBRSxRQUFJTSxTQUFTRSxVQUFiO0FBQ0FQLFFBQUlLLFNBQVNHLE1BQWI7QUFDRDs7QUFFRCxNQUFNQyxTQUFTLCtCQUFnQlYsQ0FBaEIsRUFBbUIsWUFBbkIsQ0FBZjtBQUNBLE1BQU1XLFVBQVVELE9BQU9FLFlBQVAsQ0FBb0IsVUFBcEIsQ0FBaEI7QUFDQSxNQUFNQyxPQUFPbkIsU0FBU29CLEdBQVQsS0FBaUJILE9BQWpCLEdBQTJCakIsUUFBM0IsR0FBc0NBLFNBQVNxQixhQUFULENBQXVCSixPQUF2QixDQUFuRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFJRSxLQUFLRyxNQUFMLElBQWVILEtBQUtJLElBQUwsS0FBYyxRQUFqQyxFQUEyQztBQUN6QyxRQUFNQyxPQUFPUixPQUFPUyxxQkFBUCxFQUFiO0FBQ0EsUUFBTUMsV0FBV3ZCLElBQUlxQixLQUFLRyxJQUFULEdBQWdCSCxLQUFLRyxJQUFMLEdBQVlILEtBQUtJLEtBQWpCLEdBQXlCekIsQ0FBMUQ7QUFDQSxRQUFNMEIsT0FBT0gsV0FDWDFCLFNBQVM4QixrQkFBVCxDQUE0QmIsT0FBNUIsQ0FEVyxHQUVYakIsU0FBUytCLGNBQVQsQ0FBd0JkLE9BQXhCLENBRkY7QUFHQSxRQUFNRyxNQUFNUyxLQUFLVCxHQUFqQjtBQUNBLFFBQU1MLFNBQVNXLFdBQVdHLEtBQUtHLFVBQUwsQ0FBZ0JDLElBQTNCLEdBQWtDLENBQWpEO0FBQ0EsV0FBTyxFQUFFYixRQUFGLEVBQU9MLGNBQVAsRUFBUDtBQUNEOztBQUVEO0FBQ0E7QUFDQTtBQUNBLE1BQUlJLEtBQUtHLE1BQVQsRUFBaUI7QUFDZixRQUFNRSxRQUFPUixPQUFPUyxxQkFBUCxFQUFiO0FBQ0EsUUFBTUMsWUFBV3RCLElBQUlvQixNQUFLVSxHQUFULEdBQWVWLE1BQUtVLEdBQUwsR0FBV1YsTUFBS1csTUFBaEIsR0FBeUIvQixDQUF6RDs7QUFFQSxRQUFJc0IsU0FBSixFQUFjO0FBQ1osVUFBTVUsU0FBUXBDLFNBQVNxQyxnQkFBVCxDQUEwQnBCLE9BQTFCLENBQWQ7QUFDQSxVQUFNWSxTQUFPTyxPQUFNRSxXQUFOLEVBQWI7QUFGWSxVQUdKbEIsS0FISSxHQUdJUyxNQUhKLENBR0pULEdBSEk7O0FBSVosVUFBTUwsV0FBU2MsT0FBS0csVUFBTCxDQUFnQkMsSUFBL0I7QUFDQSxhQUFPLEVBQUViLFVBQUYsRUFBT0wsZ0JBQVAsRUFBUDtBQUNEOztBQUVELFFBQU1xQixRQUFRcEMsU0FBU3VDLFlBQVQsQ0FBc0J0QixPQUF0QixDQUFkO0FBQ0EsUUFBTVksUUFBT08sTUFBTUUsV0FBTixFQUFiO0FBYmUsUUFjUGxCLElBZE8sR0FjQ1MsS0FkRCxDQWNQVCxHQWRPOztBQWVmLFFBQU1MLFVBQVMsQ0FBZjtBQUNBLFdBQU8sRUFBRUssU0FBRixFQUFPTCxlQUFQLEVBQVA7QUFDRDs7QUFFRCxNQUFNeUIsUUFBUSx5QkFBVWxDLENBQVYsRUFBYUMsQ0FBYixFQUFnQlIsS0FBaEIsQ0FBZDtBQUNBLFNBQU95QyxLQUFQO0FBQ0Q7O0FBRUQ7Ozs7OztrQkFNZTNDLGEiLCJmaWxlIjoiZ2V0LWRyb3AtcG9pbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSAnZ2V0LXdpbmRvdydcblxuaW1wb3J0IGZpbmRDbG9zZXN0Tm9kZSBmcm9tICcuL2ZpbmQtY2xvc2VzdC1ub2RlJ1xuaW1wb3J0IGZpbmRQb2ludCBmcm9tICcuL2ZpbmQtcG9pbnQnXG5cbi8qKlxuICogRmluZCB0aGUgdGFyZ2V0IHBvaW50IGZvciBhIGRyb3AgYGV2ZW50YC5cbiAqXG4gKiBAcGFyYW0ge0V2ZW50fSBldmVudFxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBmaW5kRHJvcFBvaW50KGV2ZW50LCBzdGF0ZSkge1xuICBjb25zdCB7IGRvY3VtZW50IH0gPSBzdGF0ZVxuICBjb25zdCB7IG5hdGl2ZUV2ZW50LCB0YXJnZXQgfSA9IGV2ZW50XG4gIGNvbnN0IHsgeCwgeSB9ID0gbmF0aXZlRXZlbnRcblxuICAvLyBSZXNvbHZlIHRoZSBjYXJldCBwb3NpdGlvbiB3aGVyZSB0aGUgZHJvcCBvY2N1cmVkLlxuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3codGFyZ2V0KVxuICBsZXQgbiwgb1xuXG4gIC8vIENPTVBBVDogSW4gRmlyZWZveCwgYGNhcmV0UmFuZ2VGcm9tUG9pbnRgIGRvZXNuJ3QgZXhpc3QuICgyMDE2LzA3LzI1KVxuICBpZiAod2luZG93LmRvY3VtZW50LmNhcmV0UmFuZ2VGcm9tUG9pbnQpIHtcbiAgICBjb25zdCByYW5nZSA9IHdpbmRvdy5kb2N1bWVudC5jYXJldFJhbmdlRnJvbVBvaW50KHgsIHkpXG4gICAgbiA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyXG4gICAgbyA9IHJhbmdlLnN0YXJ0T2Zmc2V0XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcG9zaXRpb24gPSB3aW5kb3cuZG9jdW1lbnQuY2FyZXRQb3NpdGlvbkZyb21Qb2ludCh4LCB5KVxuICAgIG4gPSBwb3NpdGlvbi5vZmZzZXROb2RlXG4gICAgbyA9IHBvc2l0aW9uLm9mZnNldFxuICB9XG5cbiAgY29uc3Qgbm9kZUVsID0gZmluZENsb3Nlc3ROb2RlKG4sICdbZGF0YS1rZXldJylcbiAgY29uc3Qgbm9kZUtleSA9IG5vZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEta2V5JylcbiAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmtleSA9PT0gbm9kZUtleSA/IGRvY3VtZW50IDogZG9jdW1lbnQuZ2V0RGVzY2VuZGFudChub2RlS2V5KVxuXG4gIC8vIElmIHRoZSBkcm9wIERPTSB0YXJnZXQgaXMgaW5zaWRlIGFuIGlubGluZSB2b2lkIG5vZGUgdXNlIGxhc3QgcG9zaXRpb24gb2ZcbiAgLy8gdGhlIHByZXZpb3VzIHNpYmxpbmcgdGV4dCBub2RlIG9yIGZpcnN0IHBvc2l0aW9uIG9mIHRoZSBuZXh0IHNpYmxpbmcgdGV4dFxuICAvLyBub2RlIGFzIFNsYXRlIHRhcmdldC5cbiAgaWYgKG5vZGUuaXNWb2lkICYmIG5vZGUua2luZCA9PT0gJ2lubGluZScpIHtcbiAgICBjb25zdCByZWN0ID0gbm9kZUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgY29uc3QgcHJldmlvdXMgPSB4IC0gcmVjdC5sZWZ0IDwgcmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAtIHhcbiAgICBjb25zdCB0ZXh0ID0gcHJldmlvdXMgP1xuICAgICAgZG9jdW1lbnQuZ2V0UHJldmlvdXNTaWJsaW5nKG5vZGVLZXkpIDpcbiAgICAgIGRvY3VtZW50LmdldE5leHRTaWJsaW5nKG5vZGVLZXkpXG4gICAgY29uc3Qga2V5ID0gdGV4dC5rZXlcbiAgICBjb25zdCBvZmZzZXQgPSBwcmV2aW91cyA/IHRleHQuY2hhcmFjdGVycy5zaXplIDogMFxuICAgIHJldHVybiB7IGtleSwgb2Zmc2V0IH1cbiAgfVxuXG4gIC8vIElmIHRoZSBkcm9wIERPTSB0YXJnZXQgaXMgaW5zaWRlIGEgYmxvY2sgdm9pZCBub2RlIHVzZSBsYXN0IHBvc2l0aW9uIG9mXG4gIC8vIHRoZSBwcmV2aW91cyBzaWJsaW5nIGJsb2NrIG5vZGUgb3IgZmlyc3QgcG9zaXRpb24gb2YgdGhlIG5leHQgc2libGluZyBibG9ja1xuICAvLyBub2RlIGFzIFNsYXRlIHRhcmdldC5cbiAgaWYgKG5vZGUuaXNWb2lkKSB7XG4gICAgY29uc3QgcmVjdCA9IG5vZGVFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGNvbnN0IHByZXZpb3VzID0geSAtIHJlY3QudG9wIDwgcmVjdC50b3AgKyByZWN0LmhlaWdodCAtIHlcblxuICAgIGlmIChwcmV2aW91cykge1xuICAgICAgY29uc3QgYmxvY2sgPSBkb2N1bWVudC5nZXRQcmV2aW91c0Jsb2NrKG5vZGVLZXkpXG4gICAgICBjb25zdCB0ZXh0ID0gYmxvY2suZ2V0TGFzdFRleHQoKVxuICAgICAgY29uc3QgeyBrZXkgfSA9IHRleHRcbiAgICAgIGNvbnN0IG9mZnNldCA9IHRleHQuY2hhcmFjdGVycy5zaXplXG4gICAgICByZXR1cm4geyBrZXksIG9mZnNldCB9XG4gICAgfVxuXG4gICAgY29uc3QgYmxvY2sgPSBkb2N1bWVudC5nZXROZXh0QmxvY2sobm9kZUtleSlcbiAgICBjb25zdCB0ZXh0ID0gYmxvY2suZ2V0TGFzdFRleHQoKVxuICAgIGNvbnN0IHsga2V5IH0gPSB0ZXh0XG4gICAgY29uc3Qgb2Zmc2V0ID0gMFxuICAgIHJldHVybiB7IGtleSwgb2Zmc2V0IH1cbiAgfVxuXG4gIGNvbnN0IHBvaW50ID0gZmluZFBvaW50KG4sIG8sIHN0YXRlKVxuICByZXR1cm4gcG9pbnRcbn1cblxuLyoqXG4gKiBFeHBvcnQuXG4gKlxuICogQHR5cGUge0Z1bmN0aW9ufVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZpbmREcm9wUG9pbnRcbiJdfQ==
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getWindow = require('get-window');

var _getWindow2 = _interopRequireDefault(_getWindow);

var _findClosestNode = require('./find-closest-node');

var _findClosestNode2 = _interopRequireDefault(_findClosestNode);

var _findPoint = require('./find-point');

var _findPoint2 = _interopRequireDefault(_findPoint);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Find the target point for a drop `event`.
 *
 * @param {Event} event
 * @param {State} state
 * @return {Object}
 */

function findDropPoint(event, state) {
  var document = state.document;
  var nativeEvent = event.nativeEvent,
      target = event.target;
  var x = nativeEvent.x,
      y = nativeEvent.y;

  // Resolve the caret position where the drop occured.

  var window = (0, _getWindow2.default)(target);
  var n = void 0,
      o = void 0;

  // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)
  if (window.document.caretRangeFromPoint) {
    var range = window.document.caretRangeFromPoint(x, y);
    n = range.startContainer;
    o = range.startOffset;
  } else {
    var position = window.document.caretPositionFromPoint(x, y);
    n = position.offsetNode;
    o = position.offset;
  }

  var nodeEl = (0, _findClosestNode2.default)(n, '[data-key]');
  var nodeKey = nodeEl.getAttribute('data-key');
  var node = document.key === nodeKey ? document : document.getDescendant(nodeKey);

  // If the drop DOM target is inside an inline void node use last position of
  // the previous sibling text node or first position of the next sibling text
  // node as Slate target.
  if (node.isVoid && node.kind === 'inline') {
    var rect = nodeEl.getBoundingClientRect();
    var previous = x - rect.left < rect.left + rect.width - x;
    var text = previous ? document.getPreviousSibling(nodeKey) : document.getNextSibling(nodeKey);
    var key = text.key;
    var offset = previous ? text.characters.size : 0;
    return { key: key, offset: offset };
  }

  // If the drop DOM target is inside a block void node use last position of
  // the previous sibling block node or first position of the next sibling block
  // node as Slate target.
  if (node.isVoid) {
    var _rect = nodeEl.getBoundingClientRect();
    var _previous = y - _rect.top < _rect.top + _rect.height - y;

    if (_previous) {
      var _block = document.getPreviousBlock(nodeKey);
      var _text2 = _block.getLastText();
      var _key2 = _text2.key;

      var _offset2 = _text2.characters.size;
      return { key: _key2, offset: _offset2 };
    }

    var block = document.getNextBlock(nodeKey);
    var _text = block.getLastText();
    var _key = _text.key;

    var _offset = 0;
    return { key: _key, offset: _offset };
  }

  var point = (0, _findPoint2.default)(n, o, state);
  return point;
}

/**
 * Export.
 *
 * @type {Function}
 */

exports.default = findDropPoint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9maW5kLWRyb3AtcG9pbnQuanMiXSwibmFtZXMiOlsiZmluZERyb3BQb2ludCIsImV2ZW50Iiwic3RhdGUiLCJkb2N1bWVudCIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0IiwieCIsInkiLCJ3aW5kb3ciLCJuIiwibyIsImNhcmV0UmFuZ2VGcm9tUG9pbnQiLCJyYW5nZSIsInN0YXJ0Q29udGFpbmVyIiwic3RhcnRPZmZzZXQiLCJwb3NpdGlvbiIsImNhcmV0UG9zaXRpb25Gcm9tUG9pbnQiLCJvZmZzZXROb2RlIiwib2Zmc2V0Iiwibm9kZUVsIiwibm9kZUtleSIsImdldEF0dHJpYnV0ZSIsIm5vZGUiLCJrZXkiLCJnZXREZXNjZW5kYW50IiwiaXNWb2lkIiwia2luZCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJwcmV2aW91cyIsImxlZnQiLCJ3aWR0aCIsInRleHQiLCJnZXRQcmV2aW91c1NpYmxpbmciLCJnZXROZXh0U2libGluZyIsImNoYXJhY3RlcnMiLCJzaXplIiwidG9wIiwiaGVpZ2h0IiwiYmxvY2siLCJnZXRQcmV2aW91c0Jsb2NrIiwiZ2V0TGFzdFRleHQiLCJnZXROZXh0QmxvY2siLCJwb2ludCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7Ozs7QUFFQTs7Ozs7Ozs7QUFRQSxTQUFTQSxhQUFULENBQXVCQyxLQUF2QixFQUE4QkMsS0FBOUIsRUFBcUM7QUFBQSxNQUMzQkMsUUFEMkIsR0FDZEQsS0FEYyxDQUMzQkMsUUFEMkI7QUFBQSxNQUUzQkMsV0FGMkIsR0FFSEgsS0FGRyxDQUUzQkcsV0FGMkI7QUFBQSxNQUVkQyxNQUZjLEdBRUhKLEtBRkcsQ0FFZEksTUFGYztBQUFBLE1BRzNCQyxDQUgyQixHQUdsQkYsV0FIa0IsQ0FHM0JFLENBSDJCO0FBQUEsTUFHeEJDLENBSHdCLEdBR2xCSCxXQUhrQixDQUd4QkcsQ0FId0I7O0FBS25DOztBQUNBLE1BQU1DLFNBQVMseUJBQVVILE1BQVYsQ0FBZjtBQUNBLE1BQUlJLFVBQUo7QUFBQSxNQUFPQyxVQUFQOztBQUVBO0FBQ0EsTUFBSUYsT0FBT0wsUUFBUCxDQUFnQlEsbUJBQXBCLEVBQXlDO0FBQ3ZDLFFBQU1DLFFBQVFKLE9BQU9MLFFBQVAsQ0FBZ0JRLG1CQUFoQixDQUFvQ0wsQ0FBcEMsRUFBdUNDLENBQXZDLENBQWQ7QUFDQUUsUUFBSUcsTUFBTUMsY0FBVjtBQUNBSCxRQUFJRSxNQUFNRSxXQUFWO0FBQ0QsR0FKRCxNQUlPO0FBQ0wsUUFBTUMsV0FBV1AsT0FBT0wsUUFBUCxDQUFnQmEsc0JBQWhCLENBQXVDVixDQUF2QyxFQUEwQ0MsQ0FBMUMsQ0FBakI7QUFDQUUsUUFBSU0sU0FBU0UsVUFBYjtBQUNBUCxRQUFJSyxTQUFTRyxNQUFiO0FBQ0Q7O0FBRUQsTUFBTUMsU0FBUywrQkFBZ0JWLENBQWhCLEVBQW1CLFlBQW5CLENBQWY7QUFDQSxNQUFNVyxVQUFVRCxPQUFPRSxZQUFQLENBQW9CLFVBQXBCLENBQWhCO0FBQ0EsTUFBTUMsT0FBT25CLFNBQVNvQixHQUFULEtBQWlCSCxPQUFqQixHQUEyQmpCLFFBQTNCLEdBQXNDQSxTQUFTcUIsYUFBVCxDQUF1QkosT0FBdkIsQ0FBbkQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBSUUsS0FBS0csTUFBTCxJQUFlSCxLQUFLSSxJQUFMLEtBQWMsUUFBakMsRUFBMkM7QUFDekMsUUFBTUMsT0FBT1IsT0FBT1MscUJBQVAsRUFBYjtBQUNBLFFBQU1DLFdBQVd2QixJQUFJcUIsS0FBS0csSUFBVCxHQUFnQkgsS0FBS0csSUFBTCxHQUFZSCxLQUFLSSxLQUFqQixHQUF5QnpCLENBQTFEO0FBQ0EsUUFBTTBCLE9BQU9ILFdBQ1gxQixTQUFTOEIsa0JBQVQsQ0FBNEJiLE9BQTVCLENBRFcsR0FFWGpCLFNBQVMrQixjQUFULENBQXdCZCxPQUF4QixDQUZGO0FBR0EsUUFBTUcsTUFBTVMsS0FBS1QsR0FBakI7QUFDQSxRQUFNTCxTQUFTVyxXQUFXRyxLQUFLRyxVQUFMLENBQWdCQyxJQUEzQixHQUFrQyxDQUFqRDtBQUNBLFdBQU8sRUFBRWIsUUFBRixFQUFPTCxjQUFQLEVBQVA7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxNQUFJSSxLQUFLRyxNQUFULEVBQWlCO0FBQ2YsUUFBTUUsUUFBT1IsT0FBT1MscUJBQVAsRUFBYjtBQUNBLFFBQU1DLFlBQVd0QixJQUFJb0IsTUFBS1UsR0FBVCxHQUFlVixNQUFLVSxHQUFMLEdBQVdWLE1BQUtXLE1BQWhCLEdBQXlCL0IsQ0FBekQ7O0FBRUEsUUFBSXNCLFNBQUosRUFBYztBQUNaLFVBQU1VLFNBQVFwQyxTQUFTcUMsZ0JBQVQsQ0FBMEJwQixPQUExQixDQUFkO0FBQ0EsVUFBTVksU0FBT08sT0FBTUUsV0FBTixFQUFiO0FBRlksVUFHSmxCLEtBSEksR0FHSVMsTUFISixDQUdKVCxHQUhJOztBQUlaLFVBQU1MLFdBQVNjLE9BQUtHLFVBQUwsQ0FBZ0JDLElBQS9CO0FBQ0EsYUFBTyxFQUFFYixVQUFGLEVBQU9MLGdCQUFQLEVBQVA7QUFDRDs7QUFFRCxRQUFNcUIsUUFBUXBDLFNBQVN1QyxZQUFULENBQXNCdEIsT0FBdEIsQ0FBZDtBQUNBLFFBQU1ZLFFBQU9PLE1BQU1FLFdBQU4sRUFBYjtBQWJlLFFBY1BsQixJQWRPLEdBY0NTLEtBZEQsQ0FjUFQsR0FkTzs7QUFlZixRQUFNTCxVQUFTLENBQWY7QUFDQSxXQUFPLEVBQUVLLFNBQUYsRUFBT0wsZUFBUCxFQUFQO0FBQ0Q7O0FBRUQsTUFBTXlCLFFBQVEseUJBQVVsQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0JSLEtBQWhCLENBQWQ7QUFDQSxTQUFPeUMsS0FBUDtBQUNEOztBQUVEOzs7Ozs7a0JBTWUzQyxhIiwiZmlsZSI6ImZpbmQtZHJvcC1wb2ludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IGdldFdpbmRvdyBmcm9tICdnZXQtd2luZG93J1xuXG5pbXBvcnQgZmluZENsb3Nlc3ROb2RlIGZyb20gJy4vZmluZC1jbG9zZXN0LW5vZGUnXG5pbXBvcnQgZmluZFBvaW50IGZyb20gJy4vZmluZC1wb2ludCdcblxuLyoqXG4gKiBGaW5kIHRoZSB0YXJnZXQgcG9pbnQgZm9yIGEgZHJvcCBgZXZlbnRgLlxuICpcbiAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gKiBAcGFyYW0ge1N0YXRlfSBzdGF0ZVxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGZpbmREcm9wUG9pbnQoZXZlbnQsIHN0YXRlKSB7XG4gIGNvbnN0IHsgZG9jdW1lbnQgfSA9IHN0YXRlXG4gIGNvbnN0IHsgbmF0aXZlRXZlbnQsIHRhcmdldCB9ID0gZXZlbnRcbiAgY29uc3QgeyB4LCB5IH0gPSBuYXRpdmVFdmVudFxuXG4gIC8vIFJlc29sdmUgdGhlIGNhcmV0IHBvc2l0aW9uIHdoZXJlIHRoZSBkcm9wIG9jY3VyZWQuXG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdyh0YXJnZXQpXG4gIGxldCBuLCBvXG5cbiAgLy8gQ09NUEFUOiBJbiBGaXJlZm94LCBgY2FyZXRSYW5nZUZyb21Qb2ludGAgZG9lc24ndCBleGlzdC4gKDIwMTYvMDcvMjUpXG4gIGlmICh3aW5kb3cuZG9jdW1lbnQuY2FyZXRSYW5nZUZyb21Qb2ludCkge1xuICAgIGNvbnN0IHJhbmdlID0gd2luZG93LmRvY3VtZW50LmNhcmV0UmFuZ2VGcm9tUG9pbnQoeCwgeSlcbiAgICBuID0gcmFuZ2Uuc3RhcnRDb250YWluZXJcbiAgICBvID0gcmFuZ2Uuc3RhcnRPZmZzZXRcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHdpbmRvdy5kb2N1bWVudC5jYXJldFBvc2l0aW9uRnJvbVBvaW50KHgsIHkpXG4gICAgbiA9IHBvc2l0aW9uLm9mZnNldE5vZGVcbiAgICBvID0gcG9zaXRpb24ub2Zmc2V0XG4gIH1cblxuICBjb25zdCBub2RlRWwgPSBmaW5kQ2xvc2VzdE5vZGUobiwgJ1tkYXRhLWtleV0nKVxuICBjb25zdCBub2RlS2V5ID0gbm9kZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1rZXknKVxuICBjb25zdCBub2RlID0gZG9jdW1lbnQua2V5ID09PSBub2RlS2V5ID8gZG9jdW1lbnQgOiBkb2N1bWVudC5nZXREZXNjZW5kYW50KG5vZGVLZXkpXG5cbiAgLy8gSWYgdGhlIGRyb3AgRE9NIHRhcmdldCBpcyBpbnNpZGUgYW4gaW5saW5lIHZvaWQgbm9kZSB1c2UgbGFzdCBwb3NpdGlvbiBvZlxuICAvLyB0aGUgcHJldmlvdXMgc2libGluZyB0ZXh0IG5vZGUgb3IgZmlyc3QgcG9zaXRpb24gb2YgdGhlIG5leHQgc2libGluZyB0ZXh0XG4gIC8vIG5vZGUgYXMgU2xhdGUgdGFyZ2V0LlxuICBpZiAobm9kZS5pc1ZvaWQgJiYgbm9kZS5raW5kID09PSAnaW5saW5lJykge1xuICAgIGNvbnN0IHJlY3QgPSBub2RlRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICBjb25zdCBwcmV2aW91cyA9IHggLSByZWN0LmxlZnQgPCByZWN0LmxlZnQgKyByZWN0LndpZHRoIC0geFxuICAgIGNvbnN0IHRleHQgPSBwcmV2aW91cyA/XG4gICAgICBkb2N1bWVudC5nZXRQcmV2aW91c1NpYmxpbmcobm9kZUtleSkgOlxuICAgICAgZG9jdW1lbnQuZ2V0TmV4dFNpYmxpbmcobm9kZUtleSlcbiAgICBjb25zdCBrZXkgPSB0ZXh0LmtleVxuICAgIGNvbnN0IG9mZnNldCA9IHByZXZpb3VzID8gdGV4dC5jaGFyYWN0ZXJzLnNpemUgOiAwXG4gICAgcmV0dXJuIHsga2V5LCBvZmZzZXQgfVxuICB9XG5cbiAgLy8gSWYgdGhlIGRyb3AgRE9NIHRhcmdldCBpcyBpbnNpZGUgYSBibG9jayB2b2lkIG5vZGUgdXNlIGxhc3QgcG9zaXRpb24gb2ZcbiAgLy8gdGhlIHByZXZpb3VzIHNpYmxpbmcgYmxvY2sgbm9kZSBvciBmaXJzdCBwb3NpdGlvbiBvZiB0aGUgbmV4dCBzaWJsaW5nIGJsb2NrXG4gIC8vIG5vZGUgYXMgU2xhdGUgdGFyZ2V0LlxuICBpZiAobm9kZS5pc1ZvaWQpIHtcbiAgICBjb25zdCByZWN0ID0gbm9kZUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgY29uc3QgcHJldmlvdXMgPSB5IC0gcmVjdC50b3AgPCByZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC0geVxuXG4gICAgaWYgKHByZXZpb3VzKSB7XG4gICAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LmdldFByZXZpb3VzQmxvY2sobm9kZUtleSlcbiAgICAgIGNvbnN0IHRleHQgPSBibG9jay5nZXRMYXN0VGV4dCgpXG4gICAgICBjb25zdCB7IGtleSB9ID0gdGV4dFxuICAgICAgY29uc3Qgb2Zmc2V0ID0gdGV4dC5jaGFyYWN0ZXJzLnNpemVcbiAgICAgIHJldHVybiB7IGtleSwgb2Zmc2V0IH1cbiAgICB9XG5cbiAgICBjb25zdCBibG9jayA9IGRvY3VtZW50LmdldE5leHRCbG9jayhub2RlS2V5KVxuICAgIGNvbnN0IHRleHQgPSBibG9jay5nZXRMYXN0VGV4dCgpXG4gICAgY29uc3QgeyBrZXkgfSA9IHRleHRcbiAgICBjb25zdCBvZmZzZXQgPSAwXG4gICAgcmV0dXJuIHsga2V5LCBvZmZzZXQgfVxuICB9XG5cbiAgY29uc3QgcG9pbnQgPSBmaW5kUG9pbnQobiwgbywgc3RhdGUpXG4gIHJldHVybiBwb2ludFxufVxuXG4vKipcbiAqIEV4cG9ydC5cbiAqXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZmluZERyb3BQb2ludFxuIl19
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getWindow = require('get-window');

var _getWindow2 = _interopRequireDefault(_getWindow);

var _findDomNode = require('./find-dom-node');

var _findDomNode2 = _interopRequireDefault(_findDomNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Find a native DOM selection point from a Slate `key` and `offset`.
 *
 * @param {Element} root
 * @param {String} key
 * @param {Number} offset
 * @return {Object}
 */

function findNativePoint(key, offset) {
  var el = (0, _findDomNode2.default)(key);
  if (!el) return null;

  var window = (0, _getWindow2.default)(el);
  var iterator = window.document.createNodeIterator(el, NodeFilter.SHOW_TEXT);
  var start = 0;
  var n = void 0;

  while (n = iterator.nextNode()) {
    var length = n.textContent.length;

    var end = start + length;

    if (offset <= end) {
      var o = offset - start;
      return { node: n, offset: o };
    }

    start = end;
  }

  // COMPAT: For empty blocks with only a single empty text node, we will have
  // rendered a `<br/>` instead of a text node.
  if (el.childNodes.length == 1 && el.childNodes[0].childNodes.length == 1 && el.childNodes[0].childNodes[0].tagName == 'BR') {
    return { node: el.childNodes[0], offset: 0 };
  }

  return null;
}

/**
 * Export.
 *
 * @type {Function}
 */

exports.default = findNativePoint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9maW5kLW5hdGl2ZS1wb2ludC5qcyJdLCJuYW1lcyI6WyJmaW5kTmF0aXZlUG9pbnQiLCJrZXkiLCJvZmZzZXQiLCJlbCIsIndpbmRvdyIsIml0ZXJhdG9yIiwiZG9jdW1lbnQiLCJjcmVhdGVOb2RlSXRlcmF0b3IiLCJOb2RlRmlsdGVyIiwiU0hPV19URVhUIiwic3RhcnQiLCJuIiwibmV4dE5vZGUiLCJsZW5ndGgiLCJ0ZXh0Q29udGVudCIsImVuZCIsIm8iLCJub2RlIiwiY2hpbGROb2RlcyIsInRhZ05hbWUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBOzs7O0FBRUE7Ozs7OztBQUVBOzs7Ozs7Ozs7QUFTQSxTQUFTQSxlQUFULENBQXlCQyxHQUF6QixFQUE4QkMsTUFBOUIsRUFBc0M7QUFDcEMsTUFBTUMsS0FBSywyQkFBWUYsR0FBWixDQUFYO0FBQ0EsTUFBSSxDQUFDRSxFQUFMLEVBQVMsT0FBTyxJQUFQOztBQUVULE1BQU1DLFNBQVMseUJBQVVELEVBQVYsQ0FBZjtBQUNBLE1BQU1FLFdBQVdELE9BQU9FLFFBQVAsQ0FBZ0JDLGtCQUFoQixDQUFtQ0osRUFBbkMsRUFBdUNLLFdBQVdDLFNBQWxELENBQWpCO0FBQ0EsTUFBSUMsUUFBUSxDQUFaO0FBQ0EsTUFBSUMsVUFBSjs7QUFFQSxTQUFPQSxJQUFJTixTQUFTTyxRQUFULEVBQVgsRUFBZ0M7QUFBQSxRQUN0QkMsTUFEc0IsR0FDWEYsRUFBRUcsV0FEUyxDQUN0QkQsTUFEc0I7O0FBRTlCLFFBQU1FLE1BQU1MLFFBQVFHLE1BQXBCOztBQUVBLFFBQUlYLFVBQVVhLEdBQWQsRUFBbUI7QUFDakIsVUFBTUMsSUFBSWQsU0FBU1EsS0FBbkI7QUFDQSxhQUFPLEVBQUVPLE1BQU1OLENBQVIsRUFBV1QsUUFBUWMsQ0FBbkIsRUFBUDtBQUNEOztBQUVETixZQUFRSyxHQUFSO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBLE1BQ0VaLEdBQUdlLFVBQUgsQ0FBY0wsTUFBZCxJQUF3QixDQUF4QixJQUNBVixHQUFHZSxVQUFILENBQWMsQ0FBZCxFQUFpQkEsVUFBakIsQ0FBNEJMLE1BQTVCLElBQXNDLENBRHRDLElBRUFWLEdBQUdlLFVBQUgsQ0FBYyxDQUFkLEVBQWlCQSxVQUFqQixDQUE0QixDQUE1QixFQUErQkMsT0FBL0IsSUFBMEMsSUFINUMsRUFJRTtBQUNBLFdBQU8sRUFBRUYsTUFBTWQsR0FBR2UsVUFBSCxDQUFjLENBQWQsQ0FBUixFQUEwQmhCLFFBQVEsQ0FBbEMsRUFBUDtBQUNEOztBQUVELFNBQU8sSUFBUDtBQUNEOztBQUVEOzs7Ozs7a0JBTWVGLGUiLCJmaWxlIjoiZmluZC1uYXRpdmUtcG9pbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSAnZ2V0LXdpbmRvdydcblxuaW1wb3J0IGZpbmRET01Ob2RlIGZyb20gJy4vZmluZC1kb20tbm9kZSdcblxuLyoqXG4gKiBGaW5kIGEgbmF0aXZlIERPTSBzZWxlY3Rpb24gcG9pbnQgZnJvbSBhIFNsYXRlIGBrZXlgIGFuZCBgb2Zmc2V0YC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJvb3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXRcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuXG5mdW5jdGlvbiBmaW5kTmF0aXZlUG9pbnQoa2V5LCBvZmZzZXQpIHtcbiAgY29uc3QgZWwgPSBmaW5kRE9NTm9kZShrZXkpXG4gIGlmICghZWwpIHJldHVybiBudWxsXG5cbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KGVsKVxuICBjb25zdCBpdGVyYXRvciA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVOb2RlSXRlcmF0b3IoZWwsIE5vZGVGaWx0ZXIuU0hPV19URVhUKVxuICBsZXQgc3RhcnQgPSAwXG4gIGxldCBuXG5cbiAgd2hpbGUgKG4gPSBpdGVyYXRvci5uZXh0Tm9kZSgpKSB7XG4gICAgY29uc3QgeyBsZW5ndGggfSA9IG4udGV4dENvbnRlbnRcbiAgICBjb25zdCBlbmQgPSBzdGFydCArIGxlbmd0aFxuXG4gICAgaWYgKG9mZnNldCA8PSBlbmQpIHtcbiAgICAgIGNvbnN0IG8gPSBvZmZzZXQgLSBzdGFydFxuICAgICAgcmV0dXJuIHsgbm9kZTogbiwgb2Zmc2V0OiBvIH1cbiAgICB9XG5cbiAgICBzdGFydCA9IGVuZFxuICB9XG5cbiAgLy8gQ09NUEFUOiBGb3IgZW1wdHkgYmxvY2tzIHdpdGggb25seSBhIHNpbmdsZSBlbXB0eSB0ZXh0IG5vZGUsIHdlIHdpbGwgaGF2ZVxuICAvLyByZW5kZXJlZCBhIGA8YnIvPmAgaW5zdGVhZCBvZiBhIHRleHQgbm9kZS5cbiAgaWYgKFxuICAgIGVsLmNoaWxkTm9kZXMubGVuZ3RoID09IDEgJiZcbiAgICBlbC5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXMubGVuZ3RoID09IDEgJiZcbiAgICBlbC5jaGlsZE5vZGVzWzBdLmNoaWxkTm9kZXNbMF0udGFnTmFtZSA9PSAnQlInXG4gICkge1xuICAgIHJldHVybiB7IG5vZGU6IGVsLmNoaWxkTm9kZXNbMF0sIG9mZnNldDogMCB9XG4gIH1cblxuICByZXR1cm4gbnVsbFxufVxuXG4vKipcbiAqIEV4cG9ydC5cbiAqXG4gKiBAdHlwZSB7RnVuY3Rpb259XG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZmluZE5hdGl2ZVBvaW50XG4iXX0=
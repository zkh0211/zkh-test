'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isHotkey = require('is-hotkey');

var _isHotkey2 = _interopRequireDefault(_isHotkey);

var _environment = require('./environment');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Hotkeys.
 *
 * @type {Function}
 */

var BOLD = (0, _isHotkey2.default)('mod+b');
var ITALIC = (0, _isHotkey2.default)('mod+i');

var UNDO = (0, _isHotkey2.default)('mod+z');
var REDO_MAC = (0, _isHotkey2.default)('mod+shift+z');
var REDO_OTHER = (0, _isHotkey2.default)('mod+y');
var REDO = function REDO(e) {
  return _environment.IS_MAC ? REDO_MAC(e) : REDO_OTHER(e);
};

var DELETE_CHAR_BACKWARD_MAC = (0, _isHotkey2.default)('ctrl+h');
var DELETE_CHAR_FORWARD_MAC = (0, _isHotkey2.default)('ctrl+d');
var DELETE_LINE_FORWARD_MAC = (0, _isHotkey2.default)('ctrl+k');
var DELETE_CHAR_BACKWARD = function DELETE_CHAR_BACKWARD(e) {
  return _environment.IS_MAC ? DELETE_CHAR_BACKWARD_MAC(e) : false;
};
var DELETE_CHAR_FORWARD = function DELETE_CHAR_FORWARD(e) {
  return _environment.IS_MAC ? DELETE_CHAR_FORWARD_MAC(e) : false;
};
var DELETE_LINE_FORWARD = function DELETE_LINE_FORWARD(e) {
  return _environment.IS_MAC ? DELETE_LINE_FORWARD_MAC(e) : false;
};

var CONTENTEDITABLE = function CONTENTEDITABLE(e) {
  return e.key == 'Backspace' || e.key == 'Delete' || e.key == 'Enter' || e.key == 'Insert' || BOLD(e) || DELETE_CHAR_BACKWARD(e) || DELETE_CHAR_FORWARD(e) || DELETE_LINE_FORWARD(e) || ITALIC(e) || REDO(e) || UNDO(e);
};

var COMPOSING = function COMPOSING(e) {
  return e.key == 'ArrowDown' || e.key == 'ArrowLeft' || e.key == 'ArrowRight' || e.key == 'ArrowUp';
};

/**
 * Export.
 *
 * @type {Object}
 */

exports.default = {
  BOLD: BOLD,
  COMPOSING: COMPOSING,
  CONTENTEDITABLE: CONTENTEDITABLE,
  DELETE_CHAR_BACKWARD: DELETE_CHAR_BACKWARD,
  DELETE_CHAR_FORWARD: DELETE_CHAR_FORWARD,
  DELETE_LINE_FORWARD: DELETE_LINE_FORWARD,
  ITALIC: ITALIC,
  REDO: REDO,
  UNDO: UNDO
};